PERSON

 @Override
    public boolean equals(Object obj)
    {
        if (obj instanceof Person)
        {
            if ((firstName.equals(((Person) obj).firstName))
                    && (lastName.equals(((Person) obj).lastName)))
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        return false;
    }

    @Override
    public int hashCode()
    {
        int hash = 7;
        hash = 17 * hash + Objects.hashCode(this.firstName);
        hash = 17 * hash + Objects.hashCode(this.lastName);
        return hash;
    }

    @Override
    public Object clone() throws CloneNotSupportedException
    {
        return super.clone();
    }

    @Override
    public int compareTo(Person p)
    {
        int i = lastName.compareTo(p.lastName);
        if (i != 0)
        {
            if (i < 0)
            {
                return -1;
            }
            else if (i > 0)
            {
                return 1;
            }
        }

        i = firstName.compareTo(p.firstName);
        if (i != 0)
        {
            if (i < 0)
            {
                return -1;
            }
            else if (i > 0)
            {
                return 1;
            }
        }

        return 0;

    }





DVD




@Override
    public boolean equals(Object obj)
    {
        if (obj instanceof DVD)
        {
            if ((title.equals(((DVD) obj).title))
                    && (noOfStars == (((DVD) obj).noOfStars))
                    && (leadActor.equals(((DVD) obj).leadActor)))
            {
                return true;
            } else
            {
                return false;
            }
        }
        return false;
    }

    @Override
    public int hashCode()
    {
        int hash = 3;
        hash = 97 * hash + Objects.hashCode(this.title);
        hash = 97 * hash + Objects.hashCode(this.leadActor);
        hash = 97 * hash + this.noOfStars;
        return hash;
    }

    @Override
    public Object clone() throws CloneNotSupportedException
    {
        return super.clone();
    }

    public Object deepClone() throws CloneNotSupportedException
    {
        DVD d = (DVD) super.clone();
        Person p1 = (Person) d.getLeadActor().clone();
        d.setLeadActor(p1);
        return d;
    }

    @Override
    public int compareTo(DVD d)
    {
        int i = title.compareTo(d.title);
        if (i != 0)
        {
            if (i < 0)
            {
                return -1;
            } else
            {
                if (i > 0)
                {
                    return 1;
                }
            }
        }

        i = leadActor.compareTo(d.leadActor);
        if (i != 0)
        {
            if (i < 0)
            {
                return -1;
            } else
            {
                if (i > 0)
                {
                    return 1;
                }
            }
        }

        i = (noOfStars - d.noOfStars);
        if (i != 0)
        {
            if (i < 0)
            {
                return -1;
            } else
            {
                if (i > 0)
                {
                    return 1;
                }
            }
        }

        return 0;
    }